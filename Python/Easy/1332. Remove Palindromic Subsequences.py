"""
1332. Remove Palindromic Subsequences - https://leetcode.com/problems/remove-palindromic-subsequences/


You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.

A string is called palindrome if is one that reads the same backward as well as forward.


Example 1:

Input: s = "ababa"
Output: 1
Explanation: s is already a palindrome, so its entirety can be removed in a single step.
Example 2:

Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "". 
Remove palindromic subsequence "a" then "bb".
Example 3:

Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "". 
Remove palindromic subsequence "baab" then "b".
 

Constraints:

1 <= s.length <= 1000
s[i] is either 'a' or 'b'.
"""
from gettext import find


class Solution(object):
    def removePalindromeSub(self, s):
        """
        :type s: str
        :rtype: int
        """
        if s == "":
            return 0
        elif s == s[::-1]:
            return 1
        else:
            return 2
    ### solution if you were to only remove by palindromes ##   
    #     steps = 0
    #     currString = s
    #     while currString != '':
    #         longest = ""
    #         left = 0
    #         right = 0
    #         for i in range(len(currString)): # finds the longest palindrome
    #             odd = self.findPalindrome(currString, i , i) # if the palindrome has an odd length of characters
    #             even = self.findPalindrome(currString, i, i+1) # if the palindrome has an even length of characters
    #             if len(even[0]) > len(longest):
    #                 longest = even[0]
    #                 left = even[1]
    #                 right = even[2]
    #             if len(odd[0]) > len(longest):
    #                 longest = odd[0]
    #                 left = odd[1]
    #                 right = odd[2]
    #         currString = currString[:left] + currString[right:] # removes the longest palindrome
    #         steps += 1
    #     return steps
    # def findPalindrome(self, string, left, right): # finds palindrome
    #     while left >= 0 and right < len(string) and string[left] == string[right]:
    #         left -=1
    #         right +=1
    #     return [string[left+1:right], left+1, right]

############## LOCAL TESTING ONLY ############################ 
    def __init__(self, s):
        self.removePalindromeSub(s)

s = Solution("bbaabaaa")

"""
Runtime: 30 ms, faster than 15.79% of Python online submissions for Remove Palindromic Subsequences.
Memory Usage: 13.4 MB, less than 81.58% of Python online submissions for Remove Palindromic
"""